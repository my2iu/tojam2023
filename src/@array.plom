 class @ { array } extends @ {object } {
 vardecls {
 var . {native } @ {JS object }
 }
 function . {+=: { . {value } @ {object } } } { @ {array } } { } {
 . {native } . {call: {"push" }with: { @ {JS object } . {passthrough to JS: { . {value } } } } }
 return this
 }
 function . {JS array } { @ {JS object } } { } {
 return . {native }
 }
 function . {at: { . {index } @ {number } } } { @ {object } } { } {
 return . {native } . {call: {"at" }with: { @ {JS object } . {from number: { . {index } } } } } . {passthrough to Plom }

 }
 function . {remove at: { . {index } @ {number } } } { @ {void } } { } {
 . {native } . {call: {"splice" }with: { @ {JS object } . {from number: { . {index } } } }and: { @ {JS object } . {from number: { 1 } } } }
 }
 function . {size } { @ {number } } { } {
 return . {native } . {get: {"length" } } . {as number }
 }
 function . {to string } { @ {string } } { } {
 return . {native } . {to string }
 }
 constructor . {new } { } {
 super . {new }
 . {native } := @ {JS object } . {globals } . {new: {"Array" } }
 }
 classfunction . {with: { . {value } @ {object } } } { @ {array } } { } {
 // Having trouble with instance methods after constructors in Plom, but I need that syntax, so Iâ€™m using a static method that does the same thing
 var . {array } @ {array } := @ {array } . {new }
 . {array } . {+=: { . {value } } }
 return . {array }
 }
 }
